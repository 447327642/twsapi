
This README points out the most impotant things
about our modified TWS API.


eConnect():
 1. It's blocking and returns either connected or connected.
 2. It may callback informative error messages only. No more checking of
    regular messages.
 3. If any callback is fired then state will still be still "disconnected".
    Return false in this case. There are no "positive callbacks".
 4. There can be multiple callbacks, for example "UPDATE_TWS" and then
    "CONNECT_FAIL" but 2. and 3. are always in place! The client programmer
    does not need to do any cleanup actions on these callbacks.
 5. Before returning false CONNECT_FAIL with descriptive message will be fired
    fore sure.


onReceive():
 1. Any callback (except connectionClosed()) will be fired in state connected,
    even if we are going to be disconnected.
 2. Before connectionClosed() is fired we will get a "SOCKET_EXCEPTION"
    callback still in state conneted.


all other req*() functions:
 1. If called while disconneted then it sends a NOT_CONNECTED callback (we
    could have known before).
 2. On error it sends a SOCKET_EXCEPTION (still in state connected) and
    then connectionClosed() (already disconnected state).
 3. Another possible callback is UPDATE_TWS (does not disconnect us).



Thus we know about callbacks:
 1. Within connectionClosed() we are disconnected for sure.
 2. Within error() we could be disconneted only if code is CONNECT_FAIL,
    UPDATE_TWS or NOT_CONNECTED.
 3. In any other case callbacks will be received in state connected.


TODO: In oppsite to the statements above SOCKET_EXCEPTION may still be fired in
      state connected if onReceive() or onSend() are called while disconnted
      (we could have known before). To be safe we could return early and send
      NOT_CONNECTED.




### API implementation notes #############

bufferedRead()
 1. Behaves like ::recv() regarding errno and return value:
      -1: error, errno set
       0: EOF, disconnectd
      >0: success




